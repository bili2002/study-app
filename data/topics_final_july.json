{
  "topics": [
    {
      "name": "1. Множества. Декартово произведение. Релации. Функции.",
      "questions": [
        {
          "q": "Аксиоматизация на множествата – аксиоми за обема, отделянето, степенното множество и индуктивно генерираните множества",
          "a": "• Обем – $A=B\\iff(\\forall x)(x\\in A\\leftrightarrow x\\in B)$.\n• Отделяне – $\\forall A\\,\\forall\\varphi\\,\\exists B\\,(\\forall x)(x\\in B\\iff(x\\in A\\land\\varphi(x)))$.\n• Степенно множество – $\\forall A\\,\\exists\\mathcal P(A)\\,(\\forall B)(B\\subseteq A\\Rightarrow B\\in\\mathcal P(A))$.\n• Индуктивно множество – $M=\\bigcup_{i\\in\\mathbb N}M_i$ with $M_0$ given and $M_{i+1}=M_i \\cup F(M_i)$ for some operator $F$."
        },
        {
          "q": "Математическа индукция",
          "a": "• Принцип на математическата индукция – ако $P(n_0)$ е вярно и $(\\forall k\\ge n_0)(P(k)\\Rightarrow P(k+1))$, то $(\\forall n\\ge n_0)\\,P(n)$.\n• Вариция - силна индукция."
        },
        {
          "q": "Основни операции върху множества и техните свойства",
          "a": "• Обединение – $A\\cup B=\\{x\\mid x\\in A\\lor x\\in B\\}$.\n• Сечение – $A\\cap B=\\{x\\mid x\\in A\\land x\\in B\\}$.\n• Разлика – $A\\setminus B=\\{x\\mid x\\in A\\land x\\notin B\\}$.\n• Допълнение – $\\overline{A}=U\\setminus A$.\n• Симетрична разлика – $A\\triangle B=(A\\setminus B)\\cup(B\\setminus A)$.\n• Степенно множество – $\\mathcal P(A)=\\{B\\mid B\\subseteq A\\}$.\nСвойства:\n• Комутативност – $A\\cup B=B\\cup A$, $A\\cap B=B\\cap A$.\n• Асоциативност – $A\\cup(B\\cup C)=(A\\cup B)\\cup C$, $A\\cap(B\\cap C)=(A\\cap B)\\cap C$.\n• Дистрибутивност – $A\\cap(B\\cup C)=(A\\cap B)\\cup(A\\cap C)$, $A\\cup(B\\cap C)=(A\\cup B)\\cap(A\\cup C)$.\n• Идемпотентност – $A\\cup A=A$, $A\\cap A=A$.\n• Нулев/единичен елемент – $A\\cup\\varnothing=A$, $A\\cap\\varnothing=\\varnothing$, $A\\cup U=U$, $A\\cap U=A$.\n• Де Морган – $\\overline{A\\cup B}=\\overline{A}\\cap\\overline{B}$, $\\overline{A\\cap B}=\\overline{A}\\cup\\overline{B}$.\n• Симетрична разлика – комутативна, асоциативна, $A\\triangle A=\\varnothing$."
        },
        {
          "q": "Наредена двойка и наредена n-орка",
          "a": "• Наредена двойка – $(a,b)=\\{\\{a\\},\\{a,b\\}\\}$.\n• Равенство на наредени двойки – $(a,b)=(c,d)\\iff a=c \\land b=d$.\n• Наредена $n$-орка – $(a_1,\\dots,a_n)=((a_1,\\dots,a_{n-1}),a_n)$."
        },
        {
          "q": "Декартово произведение и обобщено Декартово произведение на множества",
          "a": "• Декартово произведение – $A\\times B = \\{(a,b) \\mid a\\in A\\land b\\in B\\}$.\n• Обобщено Декартово произведение – $\\prod_{i=1}^{n}A_i = \\{(a_1,\\dots,a_n) \\mid a_1\\in A_1\\land\\dots\\land a_n\\in A_n\\}$."
        },
        {
          "q": "Релация над n домейна",
          "a": "• Релация над $n$ домейна – $R\\subseteq A_1\\times\\cdots\\times A_n$."
        },
        {
          "q": "Свойства на бинарните релации",
          "a": "• Рефлексивност – $(\\forall a\\in A)(a\\,R\\,a)$.\n• Антирефлексивност – $(\\forall a\\in A)\\,\\neg(a\\,R\\,a)$.\n• Симетричност – $(\\forall a,b\\in A)(a\\,R\\,b \\Rightarrow b\\,R\\,a)$.\n• Антисиметричност – $(\\forall a,b\\in A)(a\\ne b \\Rightarrow ((a\\,R\\,b)\\,\\oplus\\,(b\\,R\\,a)))$.\n• Силна антисиметричност (асиметричност) – $(\\forall a,b\\in A)(a\\,R\\,b \\Rightarrow \\neg b\\,R\\,a)$.\n• Транзитивност – $(a\\,R\\,b \\land b\\,R\\,c) \\Rightarrow a\\,R\\,c$."
        },
        {
          "q": "Релации на еквивалентост и класове на еквивалентност",
          "a": "• Еквивалентна релация – $R$ върху $A$ е еквивалентна, ако е рефлексивна, симетрична и транзитивна.\n• Клас на еквивалентност – $[a]_R=\\{x\\in A\\mid a\\,R\\,x\\}$."
        },
        {
          "q": "Релации на частична наредба",
          "a": "• Частична наредба – релация $\\preceq$ върху множество $A$ е частична наредба, ако е: рефлексивна, антисиметрична и транзитивна. Пример – $(\\mathcal P(S),\\subseteq)$"
        },
        {
          "q": "Диаграми на Хассе",
          "a": "• Диаграма на Хассе – неориентиран граф, получен от ориентирания граф на частична наредба $(A,\\preceq)$ чрез: \n 1. премахване на примките $(a,a)$; \n 2. запазване само на покритията $(a,b)$, т.е. $a\\prec b$ и няма $c$ с $a\\prec c\\prec b$;\n 3. изчертаване на ръбовете така, че краят $b$ да е по-високо от началото $a$, като стрелките и посоките се подразбират (отдолу нагоре)."
        },
        {
          "q": "Релации на пълна наредба",
          "a": "• Пълна наредба – т.е. имаме рефлексивност, антисиметричност, транзитивност + тоталност. Пример - $(\\mathbb N,\\le)$."
        },
        {
          "q": "Минимален и максимален елемент в релация на частична наредба",
          "a": "• Минимален елемент – $m\\in A$ е минимален, ако $(\\forall x\\in A)(x\\preceq m \\Rightarrow x=m)$. \n• Най-малък елемент – $0_A$ е най-малък, ако $(\\forall x\\in A)(0_A\\preceq x)$. \n• Максимален елемент – $M\\in A$ е максимален, ако $(\\forall x\\in A)(M\\preceq x \\Rightarrow x=M)$. \n• Най-голям елемент – $1_A$ е най-голям, ако $(\\forall x\\in A)(x\\preceq 1_A)$."
        },
        {
          "q": "Влагане на частична наредба в пълна наредба – топологично сортиране",
          "a": "• Линейно разширение (влагане) – ако $R$ е частична наредба върху $A$ и $R'\\supseteq R$ е линейна наредба върху $A$, тогава $R'$ е влагане (топологично сортиране) на $R$."
        },
        {
          "q": "Частични и тотални функции",
          "a": "• Частична функция – $f\\subseteq A\\times B$ и $(a,b_1)\\in f\\land(a,b_2)\\in f\\;\\Rightarrow\\;b_1=b_2$.\n• Тотална функция – частична функция $f$ c допълнително $\\forall a\\in A\\,\\exists b\\in B\\,((a,b)\\in f)$."
        },
        {
          "q": "Инекции, биекции и сюрекции",
          "a": "• Инекция – $(\\forall a_1,a_2\\in A)(f(a_1)=f(a_2)\\Rightarrow a_1=a_2)$.\n• Сюрекция – $\\forall b\\in B\\,\\exists a\\in A\\;(f(a)=b)$.\n• Биекция – $f:A\\to B$ е биективна, ако е едновременно инективна и сюрективна."
        },
        {
          "q": "Дефиниция на крайно множество и на кардиналност на крайно множество",
          "a": "• Крайно множество – $A$ е крайно, ако съществува естествено число $n$ и биекция $f:A\\to\\{1,2,\\dots,n\\}$.\n• Кардиналност – за крайно $A$, ако $f:A\\to\\{1,\\dots,n\\}$ е биекция, задаваме $|A|=n$."
        },
        {
          "q": "Дефиниция на изброимо безкрайно множество",
          "a": "• Изброимо безкрайно множество – $A$ е изброимо безкрайно, ако съществува биекция $f:\\mathbb N \\to A$."
        },
        {
          "q": "Принцип на Дирихле",
          "a": "• Принцип на Дирихле – за крайни множества $X,Y$ и тотална функция $f:X\\to Y$, ако $|X|>|Y|$, съществуват $a,b\\in X$ с $a\\ne b$ и $f(a)=f(b)$."
        }
      ]
    },
    {
      "name": "2. Основни комбинаторни принципи и конфигурации. Рекурентни уравнения.",
      "questions": [
        {
          "q": "Формулировки на принципите на изброителната комбинаторика – принцип на Дирихле, принцип на биекцията, принцип на събирането, принцип на изваждането, принцип на умножението, принцип на делението, принцип за включване и изключване (с доказателство)",
          "a": "• Принцип на Дирихле – $f:X\\to Y$, $|X|>|Y|\\;\\Rightarrow\\;\\exists x_1\\neq x_2\\in X:\\,f(x_1)=f(x_2)$.\n• Принцип на биекцията – ако съществува биекция $f:A\\leftrightarrow B$, то $|A|=|B|$.\n• Принцип на събирането (разбиване) – ако $A=\\bigsqcup_{i=1}^{k}A_i$ е дис­койнтно разбиване, тогава $|A|=\\sum_{i=1}^{k}|A_i|$.\n• Принцип на изваждането – за универсум $U$: $|A|=|U|-|\\overline{A}|$, където $\\overline{A}=U\\setminus A$.\n• Принцип на умножението – за $k$ независими стъпки с възможности $n_1,\\dots,n_k$ броят е $n_1\\cdots n_k$; в частност $|A\\times B|=|A|\\cdot|B|$.\n• Принцип на делението – $A$ е раз­би­то на еквивалентни класове по $\\sim$ с една и съща кар­ди­нал­ност $k$, следователно броят на класовете е $m=|A|/k$.\n• Принцип за включване и изключване – $\\bigl|\\bigcup_{i=1}^{k}A_i\\bigr|=\\sum_{i}|A_i|-\\sum_{i<j}|A_i\\cap A_j|+\\dots+(-1)^{k+1}|A_1\\cap\\dots\\cap A_k|$. Доказателство: елемент, който попада в точно $m$ множества, се брои $\\sum_{j=1}^{m}(-1)^{j+1}\\binom{m}{j}=1$ (защото $(1-1)^m=0$)."
        },
        {
          "q": "Основните комбинаторни конфигурации: с или без наредба, с или без повтаряне (с доказателства)",
          "a": "• Наредба + без повтаряне – вариации без повторение: $P(n,k)=\\dfrac{n!}{(n-k)!}$.\n• Наредба + с повтаряне – вариации с повторение: $n^{k}$.\n• Без наредба + без повтаряне – комбинации: $\\binom{n}{k}$.\n  Доказателство (индукция по $n$ с разлагане по последния елемент):\n  База $n=k$ или $k=0$ – точно 1 подмножество.\n  Стъпка: всеки $k$‑подмножество на $\\{1,\\dots,n\\}$ или не съдържа $n$ ($\\binom{n-1}{k}$ начина) или го съдържа ($\\binom{n-1}{k-1}$ начина). Следователно $\\binom{n}{k}=\\binom{n-1}{k}+\\binom{n-1}{k-1}$.\n• Без наредба + с повтаряне – комбинации с повторение: $\\binom{n+k-1}{k}$.\n  Доказателство (звезди и прегради): разполагаме $k$ неразличими звезди и $n-1$ прегради в редица от $k+n-1$ позиции. "
        },
        {
          "q": "Биномни коефициенти и теорема на Нютон",
          "a": "• Дефиниция – $\\displaystyle\\binom{n}{k}=\\dfrac{n!}{k!(n-k)!}$ за $0\\le k\\le n$.\n• Свойства – симетрия $\\binom{n}{k}=\\binom{n}{n-k}$; рекурентност $\\binom{n}{k}=\\binom{n-1}{k}+\\binom{n-1}{k-1}$.\n• Теорема на Нютон – $(x+y)^n=\\sum_{k=0}^{n}\\binom{n}{k}x^{k}y^{n-k}$.\n  Доказателство с индукция по $n$."
        },
        {
          "q": "Доказателства на комбинаторни тъждества чрез комбинаторни разсъждения (принцип на двукратното броене)",
          "a": "• \\(\\sum_{k=0}^{n}\\binom{n}{k}=2^{n}\\)\n  Броим всички подмножества: по елементи (2^n) и по размер k.\n• \\(\\sum_{k=0}^{n}k\\binom{n}{k}=n2^{n-1}\\)\n  Броим двойки (A,a), a∈A: по размер на A и по избор на отличен елемент.\n"
        },
        {
          "q": "Алгоритъм за решаване на линейни рекурентни уравнения с константни коефициенти – хомогенни и нехомогенни",
          "a": "• Хомогенна рекурента от ред k\n  \\[a_{n}+c_{1}a_{n-1}+\\dots+c_{k}a_{n-k}=0,\\qquad c_{k}\\ne 0.\\]\n  1) Построй характеристичния полином\n     \\[P(\\lambda)=\\lambda^{k}+c_{1}\\lambda^{k-1}+\\dots+c_{k}.\\]\n  2) Нека корените на P са β₁, …, β_t (t≤k) и кратностите им са r₁, …, r_t, така че r₁+⋯+r_t=k.\n  3) Общото решение е\n     \\[a_{n}^{(h)}=\\sum_{i=1}^{t}\\sum_{j=0}^{r_{i}-1}A_{i,j}\\,n^{j}\\,β_{i}^{\\,n}.\\]\n     • Ако всички корени са прости (r_i=1), това се свива до  \n       \\[a_{n}^{(h)}=A_{1}β_{1}^{n}+\\dots+A_{k}β_{k}^{n}.\\]\n  4) За да се намерят константите A_{i,j}, замести n=0,1,…,k−1 в (h) и получи k линейни алгебрични уравнения с k неизвестни.\n\n• Нехомогенна рекурента със същия ред k\n  \\[a_{n}+c_{1}a_{n-1}+\\dots+c_{k}a_{n-k}=\\sum_{s=1}^{\\ell}p_{s}(n)\\,b_{s}^{\\,n}.\\]\n  Тук p_s(n) е полином степен d_s, а b₁,…,b_ℓ са две по две различни константи.\n  Алгоритъмът е следният:\n  1) Игнорирай дясната страна и намери мултимножеството X на корените на P, както в хомогенния случай.\n  2) Построй мултимножеството Y: за всяко b_s включи го с кратност d_s+1 (пример – ако p_s е квадратичен, d_s=2 → кратност 3).\n  3) Вземи обединението X∪Y (сумираш кратностите на съвпадащите числа). Така получаваш базовите показатели β и новите им кратности \\(\\bar r_β\\).\n  4) Запиши **общото решение** на пълната рекурента точно във формата\n     \\[a_{n}=\\sum_{β}(\\;A_{β,0}+A_{β,1}n+\\dots+A_{β,\\bar r_{β}-1}n^{\\bar r_{β}-1}\\;)β^{\\,n}.\\]\n     – Когато b_s вече е корен на P, факторът n^{\\bar r_{β}-1} осигурява правилния „повдигнат“ ansatz (това е класическото правило за резонанс).\n  5) Неизвестните константи са \\(k+\\ell\\) на брой. Имаме k дадени начални стойности; за още \\(\\ell\\) уравнения използвай (10) с n = −1, −2, …, −ℓ. Получената линейна система определя всички константи и така се получава точното решение.\n\n• Проверката в края е задължителна: заместено в рекурентата, намереното a_n трябва да дава 0 (за хомогенната) или съответната дясна страна (за нехомогенната)."

        }
      ]
    },
    {
      "name": "3. Графи. Дървета. Обхождания на графи.",
      "questions": [
        {
          "q": "Дефиниции за краен ориентиран (мулти)граф и краен неориентиран (мулти)граф",
          "a": "• Краен ориентиран граф (без мулти):\n  \\[G = (V, E), \\quad E \\subseteq V \\times V\\]\n• Краен ориентиран мултиграф:\n  \\[G = (V, E, f_0), \\quad V \\text{ — крайно множество от върхове}, \\quad E \\text{ — крайно множество от ребра}\\]  \\[f_0: E \\to V \\times V\\]\n• Краен неориентиран мултиграф:\n  \\[G = (V, E, f_0), \\quad f_0: E \\to \\{\\{u,v\\} \\mid u,v \\in V\\}\\]\n• Краен неориентиран граф (без мулти):\n  \\[G = (V, E), \\quad E \\subseteq \\{\\{u,v\\} \\mid u,v \\in V\\}\\]"
        },
        {
          "q": "Дефиниции за път (цикъл) в ориентиран и неориентиран мултиграф",
          "a": "• Ориентиран път:\n  Нека \\(G=(V,E,f_0)\\) е ориентиран мултиграф.\n  \\[p=(v_0,e_1,v_1,e_2,\\dots,e_t,v_t),\\qquad t\\ge 0\\]\n  където\n  \\[v_i\\in V,\\; e_j\\in E,\\; f_0(e_j)=(v_{j-1},v_j)\\;(1\\le j\\le t).\\]\n  Цикъл: \\(v_0=v_t\\) и \\(t\\ge 1\\).\n\n• Неориентиран път:\n  Нека \\(G=(V,E,f_0)\\) е неориентиран мултиграф.\n  \\[p=(v_0,e_1,v_1,e_2,\\dots,e_t,v_t),\\qquad t\\ge 0\\]\n  където\n  \\[v_i\\in V,\\; e_j\\in E,\\; f_0(e_j)=\\{v_{j-1},v_j\\}\\;(1\\le j\\le t).\\]\n  Цикъл: \\(v_0=v_t\\) и \\(t\\ge 1\\)."
        },
        {
          "q": "Свързаност и свързани компоненти на граф",
          "a": "• Свързани върхове:\n  \\[u \\sim_G v \\;\\Longleftrightarrow\\; \\exists \\text{ път } u\\rightsquigarrow v.\\]\n\n• Свързан граф:\n  \\[G \\text{ е свързан } \\Longleftrightarrow (\\forall u,v\\in V)\\; u \\sim_G v.\\]\n\n• Свързани компоненти:\n  Класовете на еквивалентност по \\(\\sim_G\\). Индуцираният подграф \\(G[C]\\) се нарича свързана компонента. Също са и максималните по включване подграфи."
        },
        {
          "q": "Дефиниция на дърво и кореново дърво",
          "a": "• Дърво: \\[T=(V,E),\\quad T\\text{ е свързан и ацикличен.}\\]\n• Кореново дърво: \\[(T,r),\\quad r\\in V\\;\\text{— фиксиран корен на }T.\\]"
        },
        {
          "q": "Доказателство, че всяко кореново дърво е дърво и |V|=|E|+1",
          "a": "• (i) Кореново дърво → дърво:\n  Кореновото дърво е двойка \\((T,r)\\) с \\(T\\) свързан и ацикличен ⇒ \\(T\\) е дърво.\n\n• (ii) Свойство \\(|V| = |E| + 1\\):\n  Доказваме по индукция по \\(n=|V|\\).\n  База \\(n=1\\): \\(|E|=0\\) ⇒ \\(1 = 0 + 1\\).\n  Стъпка \\(n→n+1\\):\n  В дърво има лист \\(v\\). Премахваме \\(v\\) и реброто му \\(e\\), получаваме дърво \\(T'=(V',E')\\) с \\(|V'|=n, |E'|=n-1\\).\n  Връщайки \\(v,e\\): \\(|V|=n+1, |E|=n\\) ⇒ \\(|V| = |E| + 1\\)."
        },
        {
          "q": "Покриващо дърво на граф",
          "a": "• Нека $G=(V,E)$.\\n• За всяко дърво $T=(V,E_T)$ с $E_T\\subseteq E$ е покриващо дърво."
        },
        {
          "q": "Обхождане на граф в ширина и дълбочина",
          "a": "BFS(G, s):\n  for v ∈ V:  color[v] ← white\n  color[s] ← gray\n  Q ← ⟨s⟩\n  while Q ≠ ∅:\n    u ← pop(Q)\n    for (u,v) ∈ E:\n      if color[v] = white:\n        color[v] ← gray\n        parent[v] ← u\n        push(Q, v)\n    color[u] ← black\nИнвариант: опашката съдържа само gray върхове по ненамаляваща дистанция.\nПолу-инвариант: dist[v] не намалява.\n\nDFS(G):\n  for v ∈ V:  color[v] ← white\n  for v ∈ V:\n    if color[v] = white:\n      DFS-Visit(v)\n\nDFS-Visit(u):\n  color[u] ← gray\n  for (u,v) ∈ E:\n    if color[v] = white:\n      parent[v] ← u\n      DFS-Visit(v)\n  color[u] ← black\nИнвариант: стекът от рекурсии е проста пътека (gray върхове); black са приключени.\nПолу-инвариант: discover/finish интервалите на потомците са вложени."
        },
        {
          "q": "Ойлерови обхождания на мултиграф",
          "a": "• Ойлеров път: \\[p=(v_0,e_1,v_1,\\dots,e_m,v_m),\\quad m=|E|-1,\\] съдържа всяко ребро от графа точно веднъж.\n\n• Ойлеров цикъл: Ойлеров път с \\(v_0=v_m\\)."
        },
        {
          "q": "Теореми за съществуване на Ойлеров цикъл (с доказателство) и Ойлеров път",
          "a": "• Ойлеров цикъл (неориентиран мултиграф):\n  \\[G \\text{ свързан } \\land (\\forall v)\\, \\deg(v)\\equiv0\\pmod2 \\;\\Longleftrightarrow\\; G \\text{ има Ойлеров цикъл}.\\]\n  Доказателство: ⇐ Хиерхолцер – четност гарантира сшиване на затворени пътеки; ⇒ всеки вход има изход ⇒ степента е четна.\n\n• Ойлеров път:\n  \\[G \\text{ свързан } \\land |\\{v\\mid \\deg(v)\\text{ нечетна}\\}|\\in\\{0,2\\} \\;\\Longleftrightarrow\\; G \\text{ има Ойлеров път}.\\]\n  Доказателство: ако 0 – цикъл; ако 2 – добави фиктивно ребро, получи цикъл, махни го ⇒ път. В обратната посока пътят дава точно 0 или 2 върха с нечетна степен.\n\n(Ориентиран граф: in(v)=out(v) за цикъл; in-out = ±1 за точно 2 върха за път.)"
        }
      ]
    },
    {
      "name": "4. Kрайни автомати. Регулярни езици.",
      "questions": [
        {
          "q": "Детерминирани крайни автомати",
          "a": ""
        },
        {
          "q": "Недетерминирани крайни автомати",
          "a": ""
        },
        {
          "q": "Представяне на всеки недетерминиран краен автомат с детерминиран (с доказателство)",
          "a": ""
        },
        {
          "q": "Регулярни операции",
          "a": ""
        },
        {
          "q": "Доказателство за затвореност на автоматните езици относно регулярните операции",
          "a": ""
        },
        {
          "q": "Регулярни езици",
          "a": ""
        },
        {
          "q": "Формулировка и доказателство на теоремата на Клини",
          "a": ""
        },
        {
          "q": "Формулировка и доказателство на лемата разрастване за регулярни езици (uvw-лема)",
          "a": ""
        },
        {
          "q": "Примери за нерегулярни езици",
          "a": ""
        },
        {
          "q": "Формулировка и доказателство на теоремата на Майхил -Нероуд",
          "a": ""
        },
        {
          "q": "Алгоритъм за конструиране на минимален краен детерминиран тотален автомат, еквивалентен на даден детерминиран краен автомат",
          "a": ""
        }
      ]
    },
    {
      "name": "5. Контекстносвободни граматики и езици. Стекови автомати.",
      "questions": [
        {
          "q": "Контекстносвободнa граматикa, дърво на синтактичен анализ, контекстносвободен език",
          "a": ""
        },
        {
          "q": "Доказателство на теоремите за затвореност на контекстносвободните езици",
          "a": ""
        },
        {
          "q": "Недетерминиран стеков автомат",
          "a": ""
        },
        {
          "q": "Изпълнение в недетерминиран стеков автомат",
          "a": ""
        },
        {
          "q": "Език, разпознаван от недетерминиран стеков автомат",
          "a": ""
        },
        {
          "q": "Доказателство на теорема за свеждане на контекстносвободна граматика към еквивалентен недетерминиран стеков автомат",
          "a": ""
        },
        {
          "q": "Формулировка и доказателство на лемата за разрастване за контекстносвободни езици",
          "a": ""
        },
        {
          "q": "Примери с доказателства за езици, които не са контекстносвободни",
          "a": ""
        },
        {
          "q": "Доказателство за незатвореността на контекстносвободните езици относно допълнение и сечение",
          "a": ""
        }
      ]
    },
    {
      "name": "6. Сложност на алгоритъм. Асимптотично поведение на целочислени функции. Сложност на рекурсивни програми.",
      "questions": [
        {
          "q": "Модели на изчисленията – машина на Тюринг, машина с произволен достъп и език за програмиране",
          "a": ""
        },
        {
          "q": "Дефиниции на (машинно-зависима) сложност (по време и памет) в най- лошия и средния случай",
          "a": ""
        },
        {
          "q": "Поведение на асимптотически положителни целочислени функции O / омега функции",
          "a": ""
        },
        {
          "q": "Свойства и гранични теореми (без доказателство)",
          "a": ""
        },
        {
          "q": "Формулировка на теоремата за решенията на рекурентни отношения от вида T(1)=(1), T(n)=a.T(n/b) + f(n), n>1",
          "a": ""
        }
      ]
    },
    {
      "name": "7. Алгоритми в графи с тегла на ребрата. Оценки за сложност.",
      "questions": [
        {
          "q": "Дефиниция на минимално покриващо дърво (МПД) на свързан граф с тегла на ребрата",
          "a": ""
        },
        {
          "q": "Формулировка и доказателство на теоремата за съгласуваното множество (условия за нарастване на подмножество на МПД)",
          "a": ""
        },
        {
          "q": "Алгоритми на Прим и Крускал, имплементации и оценка на сложността",
          "a": ""
        },
        {
          "q": "Задачи за най-къс път в граф с тегла на ребрата",
          "a": ""
        },
        {
          "q": "Дърво на най- късите пътища",
          "a": ""
        },
        {
          "q": "Алгоритъм за намиране на дърво на най-къси пътища в граф с константни тегла по ребрата и алгоритъм на Дейкстра",
          "a": ""
        },
        {
          "q": "Оценка на сложността",
          "a": ""
        },
        {
          "q": "Алгоритъм на Флойд за намиране на всички двойки най-кратки пътища",
          "a": ""
        }
      ]
    },
    {
      "name": "8. Динамично програмиране. Оценки за сложност.",
      "questions": [
        {
          "q": "Същност на алгоритмичната схема „динамично програмиране” – свеждане на задача със зададен размер към задачи от същия вид с по-малки размери и „мемоизация”",
          "a": ""
        },
        {
          "q": "Принцип за оптималност и конструиране на решението на задачата от решенията на подзадачите",
          "a": ""
        },
        {
          "q": "Задачи с линейна таблица на подзадачите (най-дълга растяща подредица)",
          "a": ""
        },
        {
          "q": "Задачи с триъгълна таблица на подзадачите (оптимално разбиване на редица)",
          "a": ""
        },
        {
          "q": "Задачи с правоъгълна таблица на подзадачите (най-дълга обща подредица на две редици, задача за раницата)",
          "a": ""
        }
      ]
    },
    {
      "name": "9. Компютърни архитектури – Формати на данните. Вътрешна структура на",
      "questions": [
        {
          "q": "централен процесор – блокове и конвейерна обработка, инструкции",
          "a": ""
        },
        {
          "q": "Oбща структура на компютрите и концептуално изпълнение на инструкциите, запомнена програма",
          "a": ""
        },
        {
          "q": "Формати на даннитe – цели двоични числа, двоично-десетични числа, двоични числа с плаваща запетая, знакови данни и кодови таблици",
          "a": ""
        },
        {
          "q": "Централен процесор – регистри, АЛУ, регистри на състоянията и флаговете, блокове за управление, връзка с паметта, дешифрация на инструкциите, преходи",
          "a": ""
        }
      ]
    },
    {
      "name": "10. Структура и йерархия на паметта. Сегментна и странична преадресация.",
      "questions": [
        {
          "q": "Система за прекъсване – приоритети и обслужване",
          "a": ""
        },
        {
          "q": "Структура на основната памет",
          "a": ""
        },
        {
          "q": "Йерархия – кеш, основна и виртуална памет",
          "a": ""
        },
        {
          "q": "Сегметна и странична преадресация – селектор, дескриптор, таблици и регистри при сегметна преадресация; каталог на страниците, описател, стратегии на подмяна на страниците при странична преадресация",
          "a": ""
        },
        {
          "q": "Система за прекъсване – видове прекъсвания, структура и обработка, конкурентност и приоритети, контролери на прекъсванията",
          "a": ""
        }
      ]
    },
    {
      "name": "11. Файлова система. Логическа организация и физическо представяне.",
      "questions": [
        {
          "q": "Логическа организация на файлова система (ФС)",
          "a": ""
        },
        {
          "q": "Имена на файлове",
          "a": ""
        },
        {
          "q": "Типове файлове - обикновен файл, специален файл, каталог, символна връзка, програмен канал",
          "a": ""
        },
        {
          "q": "Вътрешна структура на файл",
          "a": ""
        },
        {
          "q": "Атрибути на файл",
          "a": ""
        },
        {
          "q": "Йерархична организация на ФС - абсолютно и относително пълно име на файл, текущ каталог",
          "a": ""
        },
        {
          "q": "Физическа организация на ФС",
          "a": ""
        },
        {
          "q": "Стратегии за управление на дисковото пространство",
          "a": ""
        },
        {
          "q": "Системни структури, съдържащи информация за разпределението на дисковата памет и съхранявани постоянно на диска: за свободните блокове; за блоковете, разпределени за всеки един файл; за общи параметри на ФС",
          "a": ""
        },
        {
          "q": "Примери за физическа организация на ФС: UNIX System V; LINUX; MS DOS; NTFS",
          "a": ""
        }
      ]
    },
    {
      "name": "12. Управление на процеси и междупроцесни комуникации.",
      "questions": [
        {
          "q": "Основни системни примитиви за управление на процеси",
          "a": ""
        },
        {
          "q": "Създаване на процес",
          "a": ""
        },
        {
          "q": "Изпълнение на програма",
          "a": ""
        },
        {
          "q": "Завършване на процес",
          "a": ""
        },
        {
          "q": "Синхронизация със завършването на процеса-син",
          "a": ""
        },
        {
          "q": "Права на процеси – потребителски идентификатори на процес",
          "a": ""
        },
        {
          "q": "Групи процеси и сесия",
          "a": ""
        },
        {
          "q": "Механизми за междупроцесни комуникации",
          "a": ""
        },
        {
          "q": "Сигнали",
          "a": ""
        },
        {
          "q": "Програмни канали",
          "a": ""
        },
        {
          "q": "IPC пакет на UNIX System V: Обща памет",
          "a": ""
        },
        {
          "q": "Семафори",
          "a": ""
        },
        {
          "q": "Съобщения",
          "a": ""
        }
      ]
    },
    {
      "name": "13. Компютърни мрежи и протоколи – OSI модел. Маршрутизация. Протоколи",
      "questions": [
        {
          "q": "IPv4, IPv6, TCP, DNS",
          "a": ""
        },
        {
          "q": "OSI модел – най-обща характеристика на нивата, съпоставяне с модела TCP/IP",
          "a": ""
        },
        {
          "q": "Разпределена маршрутизация – алгоритми с дистантен вектор и следене на състоянието на линията",
          "a": ""
        },
        {
          "q": "IPv4 адресация – класова и безкласова",
          "a": ""
        },
        {
          "q": "Основни характеристики на протокол IPv6",
          "a": ""
        },
        {
          "q": "TCP – процедура на трикратно договаряне",
          "a": ""
        },
        {
          "q": "Основни характеристики на протоколи DNS (резолвинг на имената по IPv4 и IPv6)",
          "a": ""
        }
      ]
    },
    {
      "name": "14. Процедурно програмиране – основни конструкции",
      "questions": [
        {
          "q": "Принципи на структурното програмиране",
          "a": ""
        },
        {
          "q": "Управление на изчислителния процес",
          "a": ""
        },
        {
          "q": "Основни управляващи конструкции – условни оператори, оператори за цикъл",
          "a": ""
        },
        {
          "q": "Променливи – видове: локални променливи, глобални променливи; инициализация на променлива; оператор за присвояване",
          "a": ""
        },
        {
          "q": "Функции и процедури",
          "a": ""
        },
        {
          "q": "Параметри – видове параметри",
          "a": ""
        },
        {
          "q": "Предаване на параметри – по име и по стойност",
          "a": ""
        },
        {
          "q": "Типове и проверка за съответствие на тип Символни низове",
          "a": ""
        },
        {
          "q": "Представяне в паметта",
          "a": ""
        },
        {
          "q": "Основни операции със символни низове",
          "a": ""
        }
      ]
    },
    {
      "name": "15. Процедурно програмиране – указатели, масиви и рекурсия.",
      "questions": [
        {
          "q": "Изложението по въпроса трябва да включва следните по-съществени елементи: Указатели и указателна аритметика",
          "a": ""
        },
        {
          "q": "Едномерни и многомерни масиви",
          "a": ""
        },
        {
          "q": "Основни операции с масиви – индексиране",
          "a": ""
        },
        {
          "q": "Сортиране и търсене в едномерен масив – основни алгоритми",
          "a": ""
        },
        {
          "q": "Рекурсия – пряка и косвена рекурсия, линейна и разклонена рекурсия",
          "a": ""
        }
      ]
    },
    {
      "name": "16. Обектно-ориентирано програмиране. Основни принципи. Класове и обекти.",
      "questions": [
        {
          "q": "Наследяване и капсулация",
          "a": ""
        },
        {
          "q": "Абстракция със структури от данни",
          "a": ""
        },
        {
          "q": "Класове и обекти",
          "a": ""
        },
        {
          "q": "Декларация на клас и декларация на обект",
          "a": ""
        },
        {
          "q": "Основни видове конструктори",
          "a": ""
        },
        {
          "q": "Управление на динамичната памет и ресурсите (“RAII”)",
          "a": ""
        },
        {
          "q": "Методи – декларация, предаване на параметри, връщане на резултат",
          "a": ""
        },
        {
          "q": "Наследяване",
          "a": ""
        },
        {
          "q": "Производни и вложени класове",
          "a": ""
        },
        {
          "q": "Достъп до наследените компоненти",
          "a": ""
        },
        {
          "q": "Капсулация и скриване на информацията",
          "a": ""
        },
        {
          "q": "Статични полета и методи",
          "a": ""
        }
      ]
    },
    {
      "name": "17. Обектно-ориентирано програмиране. Подтипов и параметричен",
      "questions": [
        {
          "q": "полиморфизъм",
          "a": ""
        },
        {
          "q": "Множествено наследяване",
          "a": ""
        },
        {
          "q": "Виртуални функции и подтипов полиморфизъм",
          "a": ""
        },
        {
          "q": "Динамично свързване",
          "a": ""
        },
        {
          "q": "Абстрактни методи и класове",
          "a": ""
        },
        {
          "q": "Масиви от обекти и от указатели към обекти",
          "a": ""
        },
        {
          "q": "Параметричен полиморфизъм",
          "a": ""
        },
        {
          "q": "Шаблони на функция и на клас Множествено наследяване",
          "a": ""
        }
      ]
    },
    {
      "name": "18. Структури от данни. Стек, опашка, списък, дърво. Основни операции върху",
      "questions": [
        {
          "q": "тях",
          "a": ""
        },
        {
          "q": "Реализация Структури от данни – дефиниране на понятието",
          "a": ""
        },
        {
          "q": "Списък",
          "a": ""
        },
        {
          "q": "Логическо описание",
          "a": ""
        },
        {
          "q": "Списък с една и две връзки",
          "a": ""
        },
        {
          "q": "Характеристики на реализациите с една и две връзки",
          "a": ""
        },
        {
          "q": "Сложност на операциите по добавяне, премахване и намиране на елемент",
          "a": ""
        },
        {
          "q": "Дефиниране на клас за списък, използващ една от реализациите",
          "a": ""
        },
        {
          "q": "Стек",
          "a": ""
        },
        {
          "q": "Логическо описание",
          "a": ""
        },
        {
          "q": "Характеристики на статичната, динамичната и свързаната реализация",
          "a": ""
        },
        {
          "q": "Сложност на операциите по добавяне и премахване на елемент",
          "a": ""
        },
        {
          "q": "Дефиниране на клас за стек, използващ една от реализациите",
          "a": ""
        },
        {
          "q": "Опашка",
          "a": ""
        },
        {
          "q": "Логическо описание",
          "a": ""
        },
        {
          "q": "Характеристики на статичната, динамичната и свързаната реализация",
          "a": ""
        },
        {
          "q": "Сложност на операциите по добавяне и премахване на елемент",
          "a": ""
        },
        {
          "q": "Дефиниране на клас за опашка, използващ една от реализациите",
          "a": ""
        },
        {
          "q": "Дървовидни структури от данни – кореново дърво и двоично кореново дърво",
          "a": ""
        },
        {
          "q": "Логическо описание",
          "a": ""
        },
        {
          "q": "Начини за представяне в паметта",
          "a": ""
        },
        {
          "q": "Дефиниране на клас, реализиращ кореново дърво или двоично кореново дърво",
          "a": ""
        },
        {
          "q": "Двоично кореново дърво за търсене",
          "a": ""
        },
        {
          "q": "Логическо описание",
          "a": ""
        },
        {
          "q": "Начини за представяне в паметта",
          "a": ""
        },
        {
          "q": "Сложност на операциите по добавяне, премахване и търсене на елемент",
          "a": ""
        },
        {
          "q": "Дефиниране на клас реализиращ двоично кореново дърво за търсене",
          "a": ""
        }
      ]
    },
    {
      "name": "19. Функционално програмиране. Обща характеристика на функционалния стил",
      "questions": [
        {
          "q": "на програмиране",
          "a": ""
        },
        {
          "q": "Дефиниране и използване на функции",
          "a": ""
        },
        {
          "q": "Модели на оценяване",
          "a": ""
        },
        {
          "q": "Функции от по-висок ред",
          "a": ""
        },
        {
          "q": "Характерни особености на функционалния стил на програмиране",
          "a": ""
        },
        {
          "q": "Основни компоненти на функционалните програми",
          "a": ""
        },
        {
          "q": "Примитивни изрази",
          "a": ""
        },
        {
          "q": "Средства за комбиниране и абстракция",
          "a": ""
        },
        {
          "q": "Оценяване на израз",
          "a": ""
        },
        {
          "q": "Дефиниране на функция и оценяване на приложение на функция",
          "a": ""
        },
        {
          "q": "Модели на оценяване",
          "a": ""
        },
        {
          "q": "Апликативно (стриктно, call-by-value) и нормално (лениво, call-by-name) оценяване",
          "a": ""
        },
        {
          "q": "Функции от по-висок ред",
          "a": ""
        },
        {
          "q": "Функциите като параметри и оценки на обръщения към функции",
          "a": ""
        },
        {
          "q": "Анонимни (ламбда) функции",
          "a": ""
        },
        {
          "q": "Забележка: По този въпрос е възможно да бъдат дадени задачи за практическата част на изпита",
          "a": ""
        }
      ]
    },
    {
      "name": "20. Функционално програмиране. Списъци. Потоци и отложено оценяване.",
      "questions": [
        {
          "q": "Списъци",
          "a": ""
        },
        {
          "q": "Представяне",
          "a": ""
        },
        {
          "q": "Основни операции със списъци",
          "a": ""
        },
        {
          "q": "Функции от по-висок ред за работа със списъци",
          "a": ""
        },
        {
          "q": "Безкрайни потоци и безкрайни списъци",
          "a": ""
        },
        {
          "q": "Основни операции и функции от по- висок ред",
          "a": ""
        },
        {
          "q": "Отложено оценяване",
          "a": ""
        },
        {
          "q": "Работа с безкрайни потоци",
          "a": ""
        },
        {
          "q": "Забележка: По този въпрос е възможно да бъдат дадени задачи за практическата част на изпита",
          "a": ""
        }
      ]
    },
    {
      "name": "21. Синтаксис и семантика на термовете и формулите на предикатното смятане",
      "questions": [
        {
          "q": "от първи ред",
          "a": ""
        },
        {
          "q": "Унификация",
          "a": ""
        },
        {
          "q": "Дефинират се синтактичните понятия терм и формула от даден език на предикатното смятане",
          "a": ""
        },
        {
          "q": "Дефинират се понятията унификатор и най-общ унификатор за множество от термове",
          "a": ""
        },
        {
          "q": "Формулира се алгоритъм за намиране на най-общ унификатор за крайно множество от термове",
          "a": ""
        },
        {
          "q": "Дава се семантика на термовете и формулите в дадена структура за езика",
          "a": ""
        },
        {
          "q": "Доказва се, че множество от затворени универсални формули има модел точно тогава, когато множеството от частните му случаи е булево изпълнимо",
          "a": ""
        }
      ]
    },
    {
      "name": "22. Mетод на резолюцията в съждителното и в предикатното смятане от първи",
      "questions": [
        {
          "q": "ред",
          "a": ""
        },
        {
          "q": "Хорнови клаузи",
          "a": ""
        },
        {
          "q": "Дефинира се понятието съждителен резолютивен извод и се доказва теоремата за коректност и пълнота на резолютивната изводимост",
          "a": ""
        },
        {
          "q": "Описва се метода на резолюцията",
          "a": ""
        },
        {
          "q": "Дефинира се понятието хорнов дизюнкт и се доказва, че изпълнимите множества от хорнови дизюнкти имат най-малък модел",
          "a": ""
        },
        {
          "q": "Примерни типове задачи, свързани с въпроси 21 и 22: Практически задачи – за дефиниране на предикат с помощта на Пролог; за проследяване на изпълнението на програма на Пролог",
          "a": ""
        },
        {
          "q": "Теоретични задачи – за определимост и неопределимост на свойства в дадена структура; показване на изпълнимост на множество от предикатни формули чрез посочване на структура; доказване на неизпълнимост на множество от предикатни формули с помощта на метода на резолюцията",
          "a": ""
        }
      ]
    },
    {
      "name": "23. Бази от данни. Релационен модел на данните.",
      "questions": [
        {
          "q": "Релационен модел на данните: домейн; релация; кортежи; атрибути; схема на релация; схема на релационна база от данни; реализация на релационната база от данни; видове операции върху релационната база от данни; заявки към релационната база от данни",
          "a": ""
        },
        {
          "q": "Релационна алгебра: основни (обединение; разлика; декартово произведение; проекция; селекция) и допълнителни (сечение; частно; съединение; естествено съединение) операции",
          "a": ""
        }
      ]
    },
    {
      "name": "24. Бази от данни. Нормални форми.",
      "questions": [
        {
          "q": "Нормални форми",
          "a": ""
        },
        {
          "q": "Проектиране схемите на релационните бази от данни",
          "a": ""
        },
        {
          "q": "Аномалии, ограничения, ключове",
          "a": ""
        },
        {
          "q": "Функционални зависимости, аксиоми на Армстронг",
          "a": ""
        },
        {
          "q": "Първа, втора, трета нормална форма, нормална форма на Бойс-Код",
          "a": ""
        },
        {
          "q": "Многозначни зависимости; аксиоми на функционалните и многозначните зависимости; съединение без загуба; четвърта нормална форма",
          "a": ""
        },
        {
          "q": "зависимости) към зададена нормална форма",
          "a": ""
        }
      ]
    },
    {
      "name": "25. Търсене в пространството от състояния. Генетични алгоритми.",
      "questions": [
        {
          "q": "Пространство на състоянията",
          "a": ""
        },
        {
          "q": "Основни понятия",
          "a": ""
        },
        {
          "q": "Формулировка на основните типове задачи за търсене в пространството на състоянията: търсене на път до определена цел, формиране на стратегия при игри за двама играчи, намиране на цел при спазване на ограничителни условия",
          "a": ""
        },
        {
          "q": "Методи за информирано (евристично) търсене на път до определена цел: best-first search, beam search, hill climbing, A*",
          "a": ""
        },
        {
          "q": "Генетични алгоритми – основен алгоритъм, типове кръстосване и мутация",
          "a": ""
        }
      ]
    },
    {
      "name": "26. Съвременни софтуерни технологии.",
      "questions": [
        {
          "q": "Софтуерен продукт и процес",
          "a": ""
        },
        {
          "q": "Модел на софтуерен процес",
          "a": ""
        },
        {
          "q": "Софтуерни технологии",
          "a": ""
        },
        {
          "q": "Управление на софтуерен проект и ресурсите",
          "a": ""
        },
        {
          "q": "Участници в софтуерния процес",
          "a": ""
        },
        {
          "q": "Функционални и нефункционални изисквания",
          "a": ""
        },
        {
          "q": "Анализ и проектиране на софтуерните изсиквания",
          "a": ""
        },
        {
          "q": "Проектиране на софтуера",
          "a": ""
        },
        {
          "q": "Обектно-ориентиран дизайн",
          "a": ""
        },
        {
          "q": "Езици за описание",
          "a": ""
        },
        {
          "q": "UML",
          "a": ""
        },
        {
          "q": "Верификация и валидация на софтуера",
          "a": ""
        },
        {
          "q": "Тестване на софтуера",
          "a": ""
        },
        {
          "q": "Управление на процеса на тестване",
          "a": ""
        },
        {
          "q": "Управление на качеството на процеса на създаване на софтуер",
          "a": ""
        },
        {
          "q": "Съвременни софтуерни технологии",
          "a": ""
        },
        {
          "q": "Гъвкави (agile) софтуерни технологии",
          "a": ""
        },
        {
          "q": "Extreme Programming (XP)",
          "a": ""
        },
        {
          "q": "Test Driven Development",
          "a": ""
        },
        {
          "q": "Feature driven development",
          "a": ""
        },
        {
          "q": "SCRUM",
          "a": ""
        }
      ]
    },
    {
      "name": "27. Архитектури на софтуерни системи.",
      "questions": [
        {
          "q": "Софтуерни технологии центрирани около софтуерната архитектура",
          "a": ""
        },
        {
          "q": "Качествени атрибути – дизайн на архитектурата",
          "a": ""
        },
        {
          "q": "Дизайн за постигане на ефективност, сложност, скалируемост и хетерогенност, адаптируемост на архитектурата",
          "a": ""
        },
        {
          "q": "Надеждност и сигурност",
          "a": ""
        },
        {
          "q": "Компоненти и конектори",
          "a": ""
        },
        {
          "q": "Типове конектори и техните променливи характеристики",
          "a": ""
        },
        {
          "q": "Критерий за избор на подходящи конектори",
          "a": ""
        },
        {
          "q": "Архитектурни стилове",
          "a": ""
        },
        {
          "q": "Разпределени, мрежови, децентрализирани архитектури",
          "a": ""
        },
        {
          "q": "Архитектури, ориентирани към услуги и уеб услуги",
          "a": ""
        },
        {
          "q": "Клиент –сървър",
          "a": ""
        },
        {
          "q": "Анализ и визуализация на софтуерна архитектура",
          "a": ""
        }
      ]
    },
    {
      "name": "28. Симетрични оператори в крайномерни евклидови пространства. Основни",
      "questions": [
        {
          "q": "свойства",
          "a": ""
        },
        {
          "q": "Теорема за диагонализация",
          "a": ""
        },
        {
          "q": "Определение за симетричен оператор",
          "a": ""
        },
        {
          "q": "Матрица на симетричен оператор спрямо ортонормиран базис",
          "a": ""
        },
        {
          "q": "Всички характеристични корени на симетричен оператор са реални числа",
          "a": ""
        },
        {
          "q": "Всеки два собствени вектора, съответстващи на различни собствени стойности, са ортогонални помежду си",
          "a": ""
        },
        {
          "q": "Съществува ортонормиран базис на пространството, в който матрицата на симетричен оператор е диагонална",
          "a": ""
        }
      ]
    },
    {
      "name": "29. Симетрична и алтернативна група. Теорема на Кейли. Теорема за",
      "questions": [
        {
          "q": "хомоморфизмите на групи",
          "a": ""
        },
        {
          "q": "Симетрична група Sn – представяне на елементите като произведение на независими цикли",
          "a": ""
        },
        {
          "q": "Спрягане на елементите на Sn",
          "a": ""
        },
        {
          "q": "Транспозиции и представяне на елементите като произведение на транспозиции",
          "a": ""
        },
        {
          "q": "Алтернативна група",
          "a": ""
        },
        {
          "q": "Теорема на Кейли – всяка крайна група е изоморфна на подгрупа на симетричната група",
          "a": ""
        },
        {
          "q": "Хомоморфизъм при групи, ядро и образ",
          "a": ""
        },
        {
          "q": "Теорема за хомоморфизмите при групи",
          "a": ""
        }
      ]
    },
    {
      "name": "30. Теорема на Ферма. Теореми за средните стойности (Рол, Лагранж и Коши).",
      "questions": [
        {
          "q": "Формула на Тейлър",
          "a": ""
        },
        {
          "q": "Да се дефинира понятието локален екстремум на функция на една променлива",
          "a": ""
        },
        {
          "q": "Да се формулира и докаже необходимо условие за локален екстремум за диференцируеми функции (теорема на Ферма)",
          "a": ""
        },
        {
          "q": "Да се докажат следните теореми, формулирани общо за по-кратко",
          "a": ""
        },
        {
          "q": "Нека функцията е непрекъсната в затворения интервал и притежава производна поне в отворения интервал",
          "a": ""
        },
        {
          "q": "Да се докаже Рол",
          "a": ""
        },
        {
          "q": "Да се докаже Лагранж",
          "a": ""
        },
        {
          "q": "Да се докаже Коши",
          "a": ""
        },
        {
          "q": "По отношение на твърдението във в) да се докаже, че при направените в него предположения имам g(a) =/= g(b)",
          "a": ""
        },
        {
          "q": "Да се изведе формулата на Тейлър с остатъчен член във формата на Лагранж",
          "a": ""
        }
      ]
    },
    {
      "name": "31. Определен интеграл. Дефиниция и свойства. Интегруемост на непрекъснатите",
      "questions": [
        {
          "q": "функции",
          "a": ""
        },
        {
          "q": "Теорема на Нютон - Лайбниц",
          "a": ""
        },
        {
          "q": "Да се дефинират последователно: разбиване на интервал, големи и малки суми на Дарбу",
          "a": ""
        },
        {
          "q": "Да се установи, че при добавяне на нови точки в разбиването на интервала, големите суми на Дарбу не нарастват, а малките не намаляват (желателно е да се направи чертеж)",
          "a": ""
        },
        {
          "q": "Да се дефинира риманов интеграл чрез подхода на Дарбу",
          "a": ""
        },
        {
          "q": "Да се докаже, че дадена функция е интегруема по Риман тогава и само тогава, когато за всяко съществуват голяма сума на Дарбу S и малка сума на Дарбу s такива, че",
          "a": ""
        },
        {
          "q": "Като се използва тази теорема и теоремата на Кантор (без доказателство), според която всяка непрекъсната функция в краен и затворен интервал е равномерно непрекъсната, да се докаже, че всяка непрекъсната функция в краен и затворен интервал е интегруема по Риман",
          "a": ""
        },
        {
          "q": "Да се изброят (без доказателство) основните свойства на римановия интеграл",
          "a": ""
        },
        {
          "q": "За установяването на това твърдение да се приложат (без доказателство) свойството за интегриране на неравенства и теоремата, че всяка непрекъсната функция в [a, b] приема всички стойности между максимума и минимума си",
          "a": ""
        },
        {
          "q": "Да се докаже теоремата на Нютон-Лайбниц",
          "a": ""
        },
        {
          "q": "Да се покаже как теоремата се използва за изчисляване на определени интеграли",
          "a": ""
        }
      ]
    },
    {
      "name": "32. Уравнения на права и равнина. Формули за разстояния.",
      "questions": [
        {
          "q": "Векторни и параметрични (скаларни) уравнения на права и равнина",
          "a": ""
        },
        {
          "q": "Общо уравнение на права в равнината",
          "a": ""
        },
        {
          "q": "Декартово уравнение",
          "a": ""
        },
        {
          "q": "Взаимно положение на две прави",
          "a": ""
        },
        {
          "q": "Нормално уравнение на права",
          "a": ""
        },
        {
          "q": "Разстояние от точка до права",
          "a": ""
        },
        {
          "q": "Общо уравнение на равнина",
          "a": ""
        },
        {
          "q": "Взаимно положение на две равнини",
          "a": ""
        },
        {
          "q": "Нормално уравнение на равнина",
          "a": ""
        },
        {
          "q": "Разстояние от точка до равнина",
          "a": ""
        }
      ]
    },
    {
      "name": "33. Итерационни методи за решаване на нелинейни уравнения.",
      "questions": [
        {
          "q": "Да се дефинира понятието неподвижна точка на изображението  и да се докаже, че ако  е непрекъснато изображение на интервала [a,b] в себе си, то  има поне една неподвижна точка в [a,b]",
          "a": ""
        },
        {
          "q": "Да се покаже, че решаването на уравнението f(x) = 0 може да се сведе към намиране на неподвижна точка",
          "a": ""
        },
        {
          "q": "Да се дефинира понятието свиващо изображение и да се докаже, че ако  е непрекъснато изображение на интервала [a, b] в себе си и е свиващо с константа на Липшиц q<1, то: а) уравнението x = (x) има единствен корен  в [a,b]; б) редицата {xn} от последователни приближения (при произволно x0[a,b] и x n+1 = (xn), n = 0,1,2,…, клони към  при n → , като | xn – |  (b – a)qn, за всяко n",
          "a": ""
        },
        {
          "q": "Да се получи като следствие, че ако  е корен на уравнението x = (x) и  има непрекъсната производна в околностU на , за която( ) 1   , то при достатъчно добро начално приближение x0 итерационният процес, породен от , е сходящ със скоростта на геометрична прогресия",
          "a": ""
        },
        {
          "q": "Да се дефинира понятието ред на сходимост",
          "a": ""
        },
        {
          "q": "Да се дадат геометрична илюстрация, формула за последователните приближения и ред на сходимост при: метод на хордите, метод на секущите и метод на Нютон",
          "a": ""
        },
        {
          "q": "Да се докаже, че при метода на хордите сходимостта е със скоростта на геометричната прогресия (при условие, че коренът е отделен в достатъчно малък интервал)",
          "a": ""
        }
      ]
    },
    {
      "name": "34. Дискретни разпределения. Равномерно, биномно, геометрично и Поасоново",
      "questions": [
        {
          "q": "разпределение",
          "a": ""
        },
        {
          "q": "Задачи, в които възникват",
          "a": ""
        },
        {
          "q": "Моменти –математическо очакване и дисперсия",
          "a": ""
        },
        {
          "q": "На изпита комисията дава две разпределения, върху които се развива въпросът",
          "a": ""
        },
        {
          "q": "Дефиниция на дискретно вероятностно разпределение на случайна величина",
          "a": ""
        },
        {
          "q": "Свойства на вероятностите (неотрицателност и нормираност, монотонност и адитивност)",
          "a": ""
        },
        {
          "q": "За всяко от дадените две разпределения да се посочи пример, при който то възниква",
          "a": ""
        },
        {
          "q": "Да се пресметне математическото очакване и дисперсията на всяко от тези разпределения",
          "a": ""
        },
        {
          "q": "При пресмятанията може да се използва пораждаща функция или пораждаща моментите функция, но тя трябва да се дефинира и да се покажат основните й свойства (без доказателство)",
          "a": ""
        }
      ]
    }
  ]
}